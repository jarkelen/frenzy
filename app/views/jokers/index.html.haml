.row
  .span12
    %h1= "#{I18n.t('joker.jokers')}"
    %p= I18n.t('joker.intro1')
    %p= I18n.t('joker.intro2')

.row
  .span12
    .points_used
      %p= "#{I18n.t('joker.used_jokers1')}: #{@jokers.size} #{I18n.t('joker.used_jokers2')} #{Player.of_frenzy(current_user, "Clubs Frenzy").assigned_jokers}"

      - if can? :create, Joker
        = render partial: "add_joker"

.row
  .span12
    %table.table.table-striped
      %thead
        %tr
          %th= I18n.t('gameround.gameround')
          %th= I18n.t('gameround.processed')
          %th= "#{I18n.t('.joker.joker')} 1"
          %th= "#{I18n.t('.joker.joker')} 2"
          %th= "#{I18n.t('.joker.joker')} 3"
      %tbody
        - @all_gamerounds.each do |gameround|
          - jokers = Player.of_frenzy(current_user, "Clubs Frenzy").jokers.where(gameround_id: gameround)
          %tr
            - if gameround.processed
              %td= link_to markup_gameround(gameround), scores_path(gameround_id: gameround)
            - else
              %td= markup_gameround(gameround)
            %td= markup_boolean(gameround.processed)

            - counter = 0
            - jokers.each do |joker|
              - counter += 1
              - result = joker.effective?(gameround)
              %td
                %span{class: "label label-#{result}"}= joker.club.club_name
                - if can? :destroy, Joker and gameround.processed == false
                  = link_to "x", joker_path(joker), method: :delete, data: { confirm: t('.confirm', default: t("helpers.links.confirm", default: 'Are you sure?')) }, class: 'destroy_x'

            - if counter < 3
              - while counter < 3
                %td
                - counter += 1

    = will_paginate @all_gamerounds

